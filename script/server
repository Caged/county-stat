#!/usr/bin/env ruby

require 'sinatra'
require 'dotenv'
require 'pg'
require 'csv'

Dotenv.load

DB = PG.connect(dbname: ENV['COUNTY_STAT_DB_NAME'])

POPULATION_COLUMN='b01003e1'
POPULATION_TABLE='x01_age_and_sex'

# DB.type_map_for_queries = PG::BasicTypeMapForQueries.new DB
set :root, File.join(File.dirname(__FILE__), '..')
set :views, Proc.new { File.join(root, 'html') }
set :public_folder, Proc.new { File.join(root, 'html') }

def demographics
  @demographics ||= DB.exec <<-STR
    select
      table_name,
      column_name,
      full_name as desc
    from
      information_schema.columns
    inner join county_metadata_2013 c on lower(column_name) = lower(c.short_name)
    where
      table_schema = 'public' and
      table_name like 'x%' and
      full_name not like '%Margin of Error%'
    order by 1,2
  STR
end

def query_for(table, column, normalize = true)
  table = DB.escape_string(table)
  column = DB.escape_string(column)

  query = "select g.geoid as id, g.statefp, g.name, coalesce(x.#{column}, 0) as value, "
  query += "(select #{POPULATION_COLUMN} from #{POPULATION_TABLE} where #{POPULATION_TABLE}.geoid = g.geoid_data limit 1) as population"

  if normalize
    query += ", round(100000 * (#{column}::numeric / (select #{POPULATION_COLUMN} from #{POPULATION_TABLE} where #{POPULATION_TABLE}.geoid = g.geoid_data limit 1)), 2) as per_100k "
  end

  query += "from #{table} x "
  query += "inner join acs_2013_5yr_county g on x.geoid = g.geoid_data "
  query += "where statefp not in('72')"

  puts query

  query
end

def column_info(col)
  column = DB.escape_string(params[:column])
  DB.exec("select * from county_metadata_2013 where lower(short_name) = '#{column}'").first
end

get '/' do
  params[:table] ||= 'x00_counts'
  params[:column] ||= 'b00002e1'
  @column_info = column_info(params[:column])
  @demographics = demographics
  erb :index
end

get '/:table/:column' do
  @column_info = column_info(params[:column])
  @demographics = demographics
  erb :index
end

get '/csv/:table/:column.csv' do
  content_type 'application/csv'

  query = DB.exec(query_for(params[:table], params[:column]))
  csv_str = CSV.generate do |csv|
    csv << query.fields
    query.values.map { |row| csv << row }
  end

  csv_str
end
